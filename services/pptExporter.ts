import PptxGenJS from 'pptxgenjs';
import { SlideContent, Template } from '../types';

export const exportToPptx = (slides: SlideContent[], template: Template, topic: string) => {
  const pptx = new PptxGenJS();
  
  pptx.layout = 'LAYOUT_16x9';

  const textOpts = {
      fontFace: template.theme.fontFamily,
  };

  const titleSlide = pptx.addSlide();
  titleSlide.background = { color: template.theme.backgroundColor };
  titleSlide.addText(topic, {
    x: 0.5, y: 2.5, w: '90%', h: 1, align: 'center', fontSize: 44, bold: true, color: template.theme.accentColor, ...textOpts,
  });
  titleSlide.addText('An AI-Generated Presentation', {
    x: 0.5, y: 3.5, w: '90%', h: 1, align: 'center', fontSize: 24, color: template.theme.textColor, ...textOpts,
  });

  slides.forEach(slide => {
    const pptxSlide = pptx.addSlide();
    pptxSlide.background = { color: template.theme.backgroundColor };

    const titleOpts = { x: 0.5, y: 0.5, w: '90%', h: 0.8, fontSize: 32, bold: true, color: template.theme.accentColor, ...textOpts };
    const subtitleOpts = { x: 0.5, y: 1.3, w: '90%', h: 0.5, fontSize: 18, italic: true, color: template.theme.textColor, ...textOpts };

    switch (slide.layout) {
      case 'section_header':
        pptxSlide.addText(slide.title, { x: 0.5, y: 2.0, w: '90%', h: 1, align: 'center', fontSize: 36, bold: true, color: template.theme.accentColor, ...textOpts });
        pptxSlide.addText(slide.subtitle, { x: 0.5, y: 3.0, w: '90%', h: 1, align: 'center', fontSize: 20, color: template.theme.textColor, ...textOpts });
        break;

      case 'image_full_bleed':
        if (slide.imageData) {
            pptxSlide.background = { data: slide.imageData };
        }
        pptxSlide.addShape(pptx.shapes.RECTANGLE, { x: 0, y: '70%', w: '100%', h: '30%', fill: { color: '000000', transparency: 50 } });
        pptxSlide.addText(slide.title, { x: 0.5, y: '75%', w: '90%', h: 0.75, align: 'left', fontSize: 28, bold: true, color: 'FFFFFF', ...textOpts });
         pptxSlide.addText(slide.subtitle, { x: 0.5, y: '85%', w: '90%', h: 0.5, align: 'left', fontSize: 18, color: 'FFFFFF', ...textOpts });
        break;

      case 'two_column_text':
        pptxSlide.addText(slide.title, { ...titleOpts, w: '100%', align: 'center' });
        if (slide.content.length > 0) {
            const halfway = Math.ceil(slide.content.length / 2);
            const col1 = slide.content.slice(0, halfway);
            const col2 = slide.content.slice(halfway);
            pptxSlide.addText(col1.map(p => ({ text: p })), { x: 0.5, y: 1.5, w: 4.3, h: 3.5, fontSize: 14, bullet: true, color: template.theme.textColor, ...textOpts });
            pptxSlide.addText(col2.map(p => ({ text: p })), { x: 5.2, y: 1.5, w: 4.3, h: 3.5, fontSize: 14, bullet: true, color: template.theme.textColor, ...textOpts });
        }
        break;
      
      case 'image_left_text_right':
        pptxSlide.addText(slide.title, titleOpts);
        if (slide.imageData) {
          pptxSlide.addImage({ data: slide.imageData, x: 0.5, y: 1.5, w: 4.3, h: 3.5 });
        }
        if (slide.content.length > 0) {
          pptxSlide.addText(slide.content.map(p => ({ text: p })), { x: 5.2, y: 1.5, w: 4.3, h: 3.5, fontSize: 14, bullet: true, color: template.theme.textColor, ...textOpts });
        }
        break;

      case 'quote':
        if (slide.content.length > 0) {
            pptxSlide.addText(slide.content[0], { x: 1, y: 1.5, w: 8, h: 2, align: 'center', fontSize: 28, italic: true, color: template.theme.textColor, ...textOpts });
        }
        pptxSlide.addText(slide.subtitle, { x: 1, y: 3.5, w: 8, h: 1, align: 'right', fontSize: 22, bold: true, color: template.theme.accentColor, ...textOpts });
        break;
        
      case 'title_and_content':
      default:
        if (slide.imageData) {
          pptxSlide.addImage({ data: slide.imageData, x: 5.2, y: 1.8, w: 4.5, h: 3.2 });
        }
        pptxSlide.addText(slide.title, { ...titleOpts, w: 4.5 });
        pptxSlide.addText(slide.subtitle, { ...subtitleOpts, w: 4.5 });
        if (slide.content.length > 0) {
          pptxSlide.addText(slide.content.map(p => ({ text: p })), { x: 0.5, y: 2.0, w: 4.5, h: 2.8, fontSize: 14, bullet: true, color: template.theme.textColor, ...textOpts });
        }
        break;
    }
  });

  const thankYouSlide = pptx.addSlide();
  thankYouSlide.background = { color: template.theme.backgroundColor };
  thankYouSlide.addText('Thank You', {
    x: 0.5, y: 2.5, w: '90%', h: 1, align: 'center', fontSize: 44, bold: true, color: template.theme.accentColor, ...textOpts
  });
  thankYouSlide.addText('Generated by MySlides', {
    x: 0.5, y: 3.5, w: '90%', h: 1, align: 'center', fontSize: 18, color: template.theme.textColor, ...textOpts
  });

  pptx.writeFile({ fileName: `${topic.replace(/\s/g, '_')}_Presentation.pptx` });
};